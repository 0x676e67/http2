name: CI
on:
  push:
    tags: ["v*"]
  pull_request:
  workflow_dispatch:
env:
  RUST_BACKTRACE: 1

permissions:
  contents: write
  packages: write

jobs:
  style:
    name: Check Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - run: cargo fmt --all --check

  test:
    name: Test
    needs: [style]
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Dwarnings
    strategy:
      matrix:
        rust:
          - nightly
          - beta
          - stable
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install libssl-dev
        run: sudo apt-get update && sudo apt-get install libssl-dev
      - name: Build without unstable flag
        run: cargo build

      - name: Check with unstable flag
        run: cargo check --features unstable

      - name: Run lib tests and doc tests
        run: cargo test

      - name: Run integration tests
        run: cargo test -p h2-tests

      - name: Run h2spec
        run: ./ci/h2spec.sh
        if: matrix.rust == 'stable'
  
  #clippy_check:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #    - name: Run Clippy
  #      run: cargo clippy --all-targets --all-features

  msrv:
    name: Check MSRV
    needs: [style]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get MSRV from package metadata
        id: msrv
        run: grep rust-version Cargo.toml | cut -d '"' -f2 | sed 's/^/version=/' >> $GITHUB_OUTPUT

      - name: Install Rust (${{ steps.metadata.outputs.msrv }})
        id: msrv-toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.version }}

      - name: Pin some dependencies for MSRV
        run: |
          cargo update --package tokio --precise 1.38.1
          cargo update --package tokio-util --precise 0.7.11
          cargo update --package hashbrown --precise 0.15.0
          cargo update --package once_cell --precise 1.20.3


      - run: cargo check -p http2

  bench:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Run benchmark
        run: cd benches && cargo bench | grep -v 'ignored' | grep -v 'tests' | grep -v '^[[:space:]]*$' | tee output.txt

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: benches/output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: '@0x676e67'

  crates:
    name: Release
    runs-on: ubuntu-latest
    environment: Linux
    needs: [style, msrv, test]
    steps:
      - uses: actions/checkout@v3

      - name: Get tag
        if: startsWith(github.ref, 'refs/tags/')
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Tag Check
        run: |
          echo "tag=${{ steps.tag.outputs.tag }}" >> $GITHUB_ENV
          echo "tag=${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
          if [ -z "${{ steps.tag.outputs.tag }}" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_ENV
          fi

      - uses: katyo/publish-crates@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          ignore-unpublished-changes: true

      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true
